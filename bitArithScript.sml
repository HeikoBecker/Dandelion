(**
  Translation from HOL4 numbers to bit strings

  Used in inital attempt to speed up computations, used by evaluation of the
  first phase
**)
open HolKernel Parse boolLib bossLib arithmeticTheory;
open preambleDandelion;

(** Check reduceLib.num_compset() **)
val _ = new_theory "bitArith";

val _ = numLib.prefer_num();

(** Code from Michael Norrish for translating to boolean vectors **)
val tobl_def = new_specification(
  "tobl_def", ["tobl"],
  numeralTheory.bit_initiality
    |> INST_TYPE [alpha |-> “:bool -> bool list”]
    |> SPECL [“λb:bool. if b then [] else [T]”,
              “λ(n:num) r b. b::(r b : bool list)”,
              “λ(n:num) r b. ~b::r F”]
    |> SIMP_RULE bool_ss [FUN_EQ_THM])

val _ = computeLib.add_persistent_funs ["tobl_def"]

Theorem tobl_NUMERAL[compute]: tobl (NUMERAL x) = tobl x
Proof
  simp[arithmeticTheory.NUMERAL_DEF]
QED

Theorem tobl0[compute]: tobl 0 b = tobl ZERO b
Proof
  simp[arithmeticTheory.ALT_ZERO]
QED

Definition bleval_def:
  bleval [] = 0 ∧
  bleval (T::rest) = 2 * bleval rest + 1 ∧
  bleval (F::rest) = 2 * bleval rest
End

Theorem bleval_APPEND:
  bleval (xs ++ ys) = bleval ys * 2 EXP (LENGTH xs) + bleval xs
Proof
  Induct_on ‘xs’ >> simp[FORALL_BOOL, bleval_def] >>
  simp[arithmeticTheory.EXP]
QED

Theorem EVERYF_bleval0:
  bleval bs = 0 ⇔ EVERY ((=) F) bs
Proof
  Induct_on ‘bs’ >> simp[bleval_def, FORALL_BOOL]
QED

Theorem EVERYF_suffix_bleval:
  EVERY ((=) F) s ⇒ bleval (p ++ s) = bleval p
Proof
  simp[bleval_APPEND, EVERYF_bleval0]
QED

Theorem LASTbl_nonzero:
  LAST (x::xs) ⇒ 0 < bleval (x::xs)
Proof
  qid_spec_tac ‘x’ >> Induct_on ‘xs’ >> simp[bleval_def] >> rpt gen_tac >>
  rename [‘bleval (a::b::xs)’] >> Cases_on ‘a’ >> simp[bleval_def]
QED

Theorem tobl_correct:
  bleval (tobl n T) = n ∧
  bleval (tobl n F) = n + 1
Proof
  Induct_on ‘n’ using numeralTheory.bit_induction >>
  simp[tobl_def, bleval_def] >> rpt strip_tac
  >- simp[arithmeticTheory.ALT_ZERO]
  >- simp[arithmeticTheory.ALT_ZERO] >>
  simp[SimpRHS, Once arithmeticTheory.BIT1] >>
  simp[SimpRHS, Once arithmeticTheory.BIT2]
QED

Definition frombl_def:
  frombl addedp [] = 0 ∧
  frombl T [T] = ZERO ∧
  frombl F [T] = BIT1 ZERO ∧
  frombl T (F::rest) = BIT1 (frombl T rest) ∧
  frombl F (F::rest) = BIT2 (frombl T rest) ∧
  frombl T (T::rest) = BIT2 (frombl T rest) ∧
  frombl F (T::rest) = BIT1 (frombl F rest)
End

Theorem frombl_correct:
  bl ≠ [] ∧ LAST bl ⇒
  frombl F bl = bleval bl ∧
  frombl T bl = bleval bl - 1
Proof
  Induct_on ‘bl’ >> simp[] >> Cases_on ‘bl’ >> gs[] >>
  simp[frombl_def, bleval_def]
  >- (simp[Once arithmeticTheory.BIT1, SimpLHS] >>
      simp[arithmeticTheory.ALT_ZERO]) >>
  rpt strip_tac >> gs[] >> rename [‘frombl _ (x::y::xs)’] >>
  Cases_on ‘x’ >> simp[frombl_def, bleval_def]
  >- simp[Once arithmeticTheory.BIT1, SimpLHS]
  >- (simp[Once arithmeticTheory.BIT2, SimpLHS] >>
      ‘0 < bleval (y::xs) ’ suffices_by simp[] >>
      simp[LASTbl_nonzero])
  >- (simp[Once arithmeticTheory.BIT2, SimpLHS] >>
      ‘0 < bleval (y::xs) ’ suffices_by simp[] >>
      simp[LASTbl_nonzero]) >>
  simp[Once arithmeticTheory.BIT1, SimpLHS] >>
  ‘0 < bleval (y::xs) ’ suffices_by simp[] >>
  simp[LASTbl_nonzero]
QED

Definition fromBL_def:
  fromBL bs =
  if bs = [] then 0
  else
    let bs1 = REV bs []
    in
      case HD bs1 of
        T => NUMERAL (frombl F bs)
      | F =>
          let
            bs2 = dropWhile ((=) F) bs1 ;
            bs3 = REV bs2 [] ;
          in
            if bs3 = [] then 0 else NUMERAL (frombl F bs3)
End

Theorem fromBL_correct:
  fromBL bs = bleval bs
Proof
  rw[fromBL_def, bleval_def] >> gs[GSYM listTheory.REVERSE_REV]
  >- (Cases_on ‘bs’ using listTheory.SNOC_CASES >>
      gvs[listTheory.REVERSE_SNOC] >>
      simp[arithmeticTheory.NUMERAL_DEF] >> irule (cj 1 frombl_correct) >>
      simp[])
  >- gs[listTheory.dropWhile_eq_nil, EVERYF_bleval0] >>
  gs[listTheory.dropWhile_eq_nil, listTheory.EXISTS_MEM,
     arithmeticTheory.NUMERAL_DEF] >>
  pop_assum mp_tac >>
  simp[Once listTheory.MEM_SPLIT_APPEND_last] >> rw[] >>
  simp[listTheory.REVERSE_APPEND] >>
  ‘EVERY ((=) F) (REVERSE sfx)’ by simp[listTheory.EVERY_MEM] >>
  simp[listTheory.dropWhile_APPEND_EVERY, frombl_correct] >>
  gs[EVERYF_suffix_bleval]
QED

(** Now use the code to develop bit list arithmetic and implement karatsuba
    multiplication. The original idea is due to Magnus Myreen **)

Definition add_aux_def:
  add_aux [] bs F = bs ∧
  add_aux [] [] T = [T] ∧
  add_aux [] (F :: bs) T = T :: bs ∧
  add_aux [] (T :: bs) T = F :: (add_aux [] bs T) ∧
  add_aux bs [] F = bs ∧
  add_aux (F :: bs) [] T = T :: bs ∧
  add_aux (T :: bs) [] T = F :: (add_aux [] bs T) ∧
  add_aux (F :: bs1) (F :: bs2) T = T ::(add_aux bs1 bs2 F) ∧
  add_aux (F :: bs1) (F :: bs2) F = F :: (add_aux bs1 bs2 F) /\
  add_aux (T :: bs1) (F :: bs2) F = T ::(add_aux bs1 bs2 F) /\
  add_aux (T :: bs1) (F :: bs2) T = F :: (add_aux bs1 bs2 T) /\
  add_aux (F :: bs1) (T :: bs2) T = F :: (add_aux bs1 bs2 T) /\
  add_aux (F :: bs1) (T :: bs2) F = T ::(add_aux bs1 bs2 F) /\
  add_aux (T :: bs1) (T :: bs2) T = T ::(add_aux bs1 bs2 T) /\
  add_aux (T :: bs1) (T :: bs2) F = F :: (add_aux bs1 bs2 T)
End

Definition add_def:
  add bs1 bs2 = add_aux bs1 bs2 F
End

Theorem add_aux_thm:
  ∀m n b.
    bleval (add_aux m n b) = bleval m + bleval n + if b then 1 else 0
Proof
  ho_match_mp_tac add_aux_ind \\ fs [add_aux_def,bleval_def]
QED

Theorem add_thm:
  bleval (add m n) = bleval m + bleval n
Proof
  fs [add_def,add_aux_thm]
QED

Definition divpow2_def:
  divpow2 ([]:bool list) k = [] ∧
  divpow2 bs 0 = bs ∧
  divpow2 (b::bs) (SUC k) = divpow2 bs k
End

Theorem DIV_POW2:
  ∀ x y. 0 < y ⇒ 2 * x DIV (2 * y) = x DIV y
Proof
  rpt strip_tac >> gs[GSYM DIV_DIV_DIV_MULT]
  >> ‘2 * x = x * 2’ by gs[]
  >> pop_assum $ rewrite_tac o single
  >> gs[MULT_DIV]
QED

Theorem divpow2_thm:
  ∀ x k. bleval (divpow2 x k) = bleval x DIV (2 ** k)
Proof
  ho_match_mp_tac divpow2_ind >> gs[divpow2_def, bleval_def, ZERO_DIV]
  >> rpt strip_tac
  >> reverse $ Cases_on ‘b’ >> gs[bleval_def]
  >- (
    ‘2 ** SUC k = 2 * 2 ** k’ by gs[EXP]
    >> ‘2 * bleval x = bleval x * 2’ by gs[]
    >> pop_assum $ rewrite_tac o single
    >> gs[MULT_DIV, DIV_POW2])
  >> ‘2 ** SUC k = 2 * 2 ** k’ by gs[EXP]
  >> ‘2 * bleval x = bleval x * 2’ by gs[]
  >> gs[GSYM DIV_DIV_DIV_MULT]
  >> ‘2 * bleval x = bleval x * 2’ by gs[]
  >> pop_assum $ rewrite_tac o single
  >> gs[DIV_MULT]
QED

(** TODO: Try a tail recursive version that drops leading 0s **)
Definition modpow2_def:
  modpow2 ([]:bool list) k = [] ∧
  modpow2 bs 0 = [] ∧
  modpow2 (b::bs) (SUC k) = b :: (modpow2 bs k)
End

Theorem bleval_less:
  ∀ bs. bleval bs < 2 ** (LENGTH bs)
Proof
  ho_match_mp_tac bleval_ind >> gs[bleval_def] >> rw[]
  >> irule LESS_LESS_EQ_TRANS >> qexists_tac ‘2 * 2 ** LENGTH bs’
  >> conj_tac >> gs[EXP]
QED

Theorem bleval_less_large:
  LENGTH bs ≤ k ⇒ bleval bs < 2 ** k
Proof
  rpt strip_tac >> irule LESS_LESS_EQ_TRANS
  >> qexists_tac ‘2 ** LENGTH bs’ >> gs[bleval_less]
QED

Theorem modpow2_thm:
  ∀ x k. bleval (modpow2 x k) = bleval x MOD (2 ** k)
Proof
  ho_match_mp_tac modpow2_ind >> gs[modpow2_def, bleval_def, ZERO_MOD]
  >> rpt strip_tac >> reverse $ Cases_on ‘b’ >> gs[bleval_def]
  >- (
    Cases_on ‘LENGTH x < k’ >> gs[NOT_LESS]
    >- (
      ‘bleval x MOD 2 ** k = bleval x’ by gs[LESS_MOD, bleval_less_large]
      >> pop_assum $ rewrite_tac o single
      >> ‘2 * bleval x = bleval (F :: x)’ by gs[bleval_def]
      >> pop_assum $ rewrite_tac o single
      >> ‘bleval (F::x) MOD 2 ** SUC k = bleval (F::x)’
        by gs[LESS_MOD, bleval_less_large]
      >> pop_assum $ rewrite_tac o single)
    >> gs[quantHeuristicsTheory.LENGTH_LE_NUM, bleval_APPEND]
    >> ‘bleval l1 MOD 2 ** k = bleval l1’
        by (gs[LESS_MOD] >> rpt VAR_EQ_TAC >> gs[bleval_less])
    >> first_assum $ once_rewrite_tac o single
    >> gs[LEFT_ADD_DISTRIB]
    >> ‘2 * (bleval l2 * 2 ** k) = bleval l2 * 2 ** SUC k’ by gs[EXP]
    >> pop_assum $ once_rewrite_tac o single
    >> gs[]
    >> ‘2 * bleval l1 = bleval (F :: l1)’ by gs[bleval_def]
    >> pop_assum $ rewrite_tac o single
    >> gs[bleval_less_large])
  >> Cases_on ‘LENGTH x < k’ >> gs[NOT_LESS]
  >- (
    ‘bleval x MOD 2 ** k = bleval x’ by gs[LESS_MOD, bleval_less_large]
    >> pop_assum $ rewrite_tac o single
    >> ‘2 * bleval x + 1 = bleval (T :: x)’ by gs[bleval_def]
    >> pop_assum $ rewrite_tac o single
    >> ‘bleval (T::x) MOD 2 ** SUC k = bleval (T::x)’
        by gs[LESS_MOD, bleval_less_large]
    >> pop_assum $ rewrite_tac o single)
  >> gs[quantHeuristicsTheory.LENGTH_LE_NUM, bleval_APPEND]
  >> ‘bleval l1 MOD 2 ** k = bleval l1’
      by (gs[LESS_MOD] >> rpt VAR_EQ_TAC >> gs[bleval_less])
  >> first_assum $ once_rewrite_tac o single
  >> gs[LEFT_ADD_DISTRIB]
  >> ‘2 * (bleval l2 * 2 ** k) = bleval l2 * 2 ** SUC k’ by gs[EXP]
  >> pop_assum $ once_rewrite_tac o single
  >> gs[]
  >> ‘2 * bleval l1 + 1 = bleval (T :: l1)’ by gs[bleval_def]
  >> pop_assum $ rewrite_tac o single
  >> gs[bleval_less_large]
QED

Definition mul_def:
  mul [] _ = [] ∧
  mul (T::bs) bs2 = add bs2 (mul bs (F::bs2)) ∧
  mul (F::bs) bs2 = mul bs (F::bs2)
End

Theorem mul_thm:
  ∀ x y. bleval (mul x y) = bleval x * bleval y
Proof
  ho_match_mp_tac mul_ind >> gs[mul_def, bleval_def, add_thm]
QED

Definition mulpow2_def:
  mulpow2 [] _ = [] ∧
  mulpow2 bs 0 = bs ∧
  mulpow2 bs (SUC k) = F::(mulpow2 bs k)
End

Theorem mulpow2_thm:
  ∀ bs k. bleval (mulpow2 bs k) =  bleval bs * 2 ** k
Proof
  ho_match_mp_tac mulpow2_ind >> gs[mulpow2_def, bleval_def, EXP]
QED

Definition lte_aux_def:
  lte_aux [] [] = T ∧
  lte_aux (F::bs1) (T::bs2) = T ∧
  lte_aux (T::bs1) (F::bs2) = F ∧
  lte_aux (T::bs1) (T::bs2) = lte_aux bs1 bs2 ∧
  lte_aux (F::bs1) (F::bs2) = lte_aux bs1 bs2 ∧
  lte_aux _ _ = F
End

Theorem lte_aux_thm:
  ∀ bs1 bs2.
    LENGTH bs1 = LENGTH bs2 ⇒
    (lte_aux bs1 bs2 ⇔ bleval (REVERSE bs1) ≤ bleval (REVERSE bs2))
Proof
  ho_match_mp_tac lte_aux_ind >> rpt strip_tac
  >> gs[lte_aux_def, bleval_def, bleval_APPEND]
  >- (
    ‘bleval (REVERSE bs1) ≤ 2 ** LENGTH (REVERSE bs1)’
    by gs[LESS_OR_EQ, bleval_less]
    >> ‘LENGTH (REVERSE bs1) = LENGTH bs2’ by gs[LENGTH_REVERSE]
    >> irule LESS_EQ_TRANS
    >> qexists_tac ‘2 ** LENGTH bs2’ >> gs[])
  >> gs[NOT_LEQ]
  >> ‘bleval (REVERSE bs2) < 2 ** LENGTH (REVERSE bs2)’
    by gs[bleval_less]
  >> ‘LENGTH (REVERSE bs2) = LENGTH bs2’ by gs[LENGTH_REVERSE]
  >> ‘SUC (bleval (REVERSE bs2)) ≤ 2 ** LENGTH (REVERSE bs2)’
    by gs[]
  >> irule LESS_EQ_TRANS
  >> qexists_tac ‘2 ** LENGTH bs2’ >> gs[]
QED

Definition zeroPad_def:
  zeroPad [] [] = ([], []) ∧
  zeroPad (b::bs1) [] =
    (let (bs1pad, bs2pad) = zeroPad bs1 [] in
      (b::bs1pad, F::bs2pad)) ∧
  zeroPad [] (b::bs2) =
    (let (bs1pad, bs2pad) = zeroPad [] bs2 in
       (F::bs1pad, b::bs2pad)) ∧
  zeroPad (b1::bs1) (b2::bs2) =
    (let (bs1pad, bs2pad) = zeroPad bs1 bs2 in
       (b1::bs1pad, b2::bs2pad))
End

Theorem zeroPad_thm:
  ∀ bs1 bs2 bs1pad bs2pad.
    zeroPad bs1 bs2 = (bs1pad, bs2pad) ⇒
    bleval bs1 = bleval bs1pad ∧ bleval bs2 = bleval bs2pad ∧
    LENGTH bs1pad = LENGTH bs2pad
Proof
  ho_match_mp_tac zeroPad_ind >> rpt strip_tac
  >> gs[zeroPad_def, bleval_def, CaseEq"prod"]
  >- (
    Cases_on ‘zeroPad bs1 []’ >> gs[zeroPad_def, bleval_def]
    >> Cases_on ‘b’ >> gs[bleval_def]
    >> rpt VAR_EQ_TAC >> gs[bleval_def])
  >- (
    Cases_on ‘zeroPad bs1 []’ >> gs[zeroPad_def, bleval_def]
    >> rpt VAR_EQ_TAC >> gs[bleval_def])
  >- (
    Cases_on ‘zeroPad bs1 []’ >> gs[zeroPad_def, bleval_def]
    >> rpt VAR_EQ_TAC >> gs[])
  >- (
    Cases_on ‘zeroPad [] bs2’ >> gs[zeroPad_def, bleval_def]
    >> Cases_on ‘b’ >> gs[bleval_def]
    >> rpt VAR_EQ_TAC >> gs[bleval_def])
  >- (
    Cases_on ‘zeroPad [] bs2’ >> gs[zeroPad_def, bleval_def]
    >> Cases_on ‘b’ >> gs[bleval_def]
    >> rpt VAR_EQ_TAC >> gs[bleval_def])
  >- (
    Cases_on ‘zeroPad [] bs2’ >> gs[zeroPad_def, bleval_def]
    >> rpt VAR_EQ_TAC >> gs[])
  >- (
    Cases_on ‘zeroPad bs1 bs2’ >> gs[zeroPad_def, bleval_def]
    >> Cases_on ‘b1’ >> gs[bleval_def]
    >> rpt VAR_EQ_TAC >> gs[bleval_def])
  >- (
    Cases_on ‘zeroPad bs1 bs2’ >> gs[zeroPad_def, bleval_def]
    >> Cases_on ‘b2’ >> gs[bleval_def]
    >> rpt VAR_EQ_TAC >> gs[bleval_def])
  >- (
    Cases_on ‘zeroPad bs1 bs2’ >> gs[zeroPad_def, bleval_def]
    >> rpt VAR_EQ_TAC >> gs[])
QED

Definition lte_def:
  lte bs1 bs2 =
  let (bs1pad, bs2pad) = zeroPad bs1 bs2 in
    lte_aux (REV bs1pad []) (REV bs2pad [])
End

Theorem lte_thm:
  ∀ bs1 bs2. lte bs1 bs2 ⇔ bleval bs1 ≤ bleval bs2
Proof
  rpt strip_tac >> gs[lte_def]
  >> Cases_on ‘zeroPad bs1 bs2’ >> imp_res_tac zeroPad_thm
  >> ‘LENGTH (REVERSE q) = LENGTH (REVERSE r)’ by gs[LENGTH_REVERSE]
  >> first_assum $ mp_then Any mp_tac lte_aux_thm
  >> gs[GSYM REVERSE_REV, REVERSE_REVERSE]
QED

Definition sub_aux_def:
  sub_aux [] _ _ = [] ∧
  sub_aux (F :: bs1) [] T = T :: (sub_aux bs1 [] T) ∧
  sub_aux (T :: bs1) [] T = F :: bs1 ∧
  sub_aux (F :: bs1) [] F = F :: bs1 ∧
  sub_aux (T :: bs1) [] F = T :: bs1 ∧
  sub_aux (F :: bs1) (F :: bs2) T = T :: (sub_aux bs1 bs2 T) ∧
  sub_aux (F :: bs1) (F :: bs2) F = F :: (sub_aux bs1 bs2 F) ∧
  sub_aux (F :: bs1) (T :: bs2) T = F :: (sub_aux bs1 bs2 T) ∧
  sub_aux (F :: bs1) (T :: bs2) F = T :: (sub_aux bs1 bs2 T) ∧
  sub_aux (T :: bs1) (F :: bs2) T = F :: (sub_aux bs1 bs2 F) ∧
  sub_aux (T :: bs1) (F :: bs2) F = T :: (sub_aux bs1 bs2 F) ∧
  sub_aux (T :: bs1) (T :: bs2) T = T :: (sub_aux bs1 bs2 T) ∧
  sub_aux (T :: bs1) (T :: bs2) F = F :: (sub_aux bs1 bs2 F)
End

Definition sub_def:
  sub bs1 bs2 = if lte bs2 bs1 then sub_aux bs1 bs2 F else []
End

Theorem sub_aux_thm:
  ∀ bs1 bs2 b.
    (bleval bs2 + if b then 1 else 0) ≤ bleval bs1 ⇒
    bleval (sub_aux bs1 bs2 b) = bleval bs1 - (bleval bs2 + if b then 1 else 0)
Proof
  ho_match_mp_tac sub_aux_ind >> rpt conj_tac >> rpt strip_tac
  >> gs[sub_aux_def, bleval_def, LEFT_SUB_DISTRIB, LEFT_ADD_DISTRIB, SUB_RIGHT_ADD]
  >- (
    TOP_CASE_TAC >> gs[]
    >> ‘bleval bs1 = 1’ by (Cases_on ‘bleval bs1’ >> gs[])
    >> gs[])
  >- (
    cond_cases_tac >> gs[]
    >> ‘bleval bs1 = bleval bs2 + 1’ by gs[]
    >> pop_assum $ once_rewrite_tac o single >> gs[])
  >- (
    cond_cases_tac >> gs[]
    >> ‘bleval bs1 = bleval bs2 + 1’ by gs[]
    >> pop_assum $ once_rewrite_tac o single >> gs[])
  >- (
    cond_cases_tac >> gs[]
    >> ‘bleval bs2 ≤ bleval bs1’ by gs[]
    >> ‘bleval bs2 = bleval bs1’ by gs[]
    >> pop_assum $ once_rewrite_tac o single >> gs[])
  >> cond_cases_tac >> gs[]
  >> ‘bleval bs1 = bleval bs2 + 1’ by gs[]
  >> pop_assum $ once_rewrite_tac o single >> gs[]
QED

Theorem sub_thm:
  ∀ m n. bleval (sub m n) = bleval m - bleval n
Proof
  rw[sub_def, lte_thm, sub_aux_thm, bleval_def, SUB_EQ_0, NOT_LEQ]
QED

Theorem karatsuba_num:
  ∀d x y.
    0 < d ⇒
    x * y =
      let x1 = x DIV d in
      let x0 = x MOD d in
      let y1 = y DIV d in
      let y0 = y MOD d in
      let z0 = x0 * y0 in
      let z2 = x1 * y1 in
      let z1a = x1 + x0 in
      let z1b = y1 + y0 in
      let z1 = z1a * z1b in
      let z1 = z1 - z2 - z0 in
        (z2 * d + z1) * d + z0
Proof
  rpt strip_tac
  \\ irule EQ_TRANS
  \\ qexists_tac ‘(x DIV d * d + x MOD d) * (y DIV d * d + y MOD d)’
  \\ conj_tac THEN1 metis_tac [DIVISION]
  \\ fs [LEFT_ADD_DISTRIB,RIGHT_ADD_DISTRIB]
QED

Theorem karatsuba_bit:
  ∀ x y.
  bleval (mul x y) = bleval (
    let d = (fromBL
            (divpow2
             (add (divpow2 (tobl (LENGTH x) F) 1)
              (divpow2 (tobl (LENGTH y) F) 1)) 1)) + 1 in
      let x1 = divpow2 x d in
      let x0 = modpow2 x d in
      let y1 = divpow2 y d in
      let y0 = modpow2 y d in
      let z0 = mul x0 y0 in
      let z2 = mul x1 y1 in
      let z1a = add x1 x0 in
      let z1b = add y1 y0 in
      let z1Mul = mul z1a z1b in
      let z1 = sub (sub z1Mul z2) z0 in
        add (mulpow2 (add (mulpow2 z2 d) z1) d) z0)
Proof
  rpt strip_tac >> rewrite_tac [mul_thm]
  >> qmatch_goalsub_abbrev_tac ‘fromBL dVal’
  >> qspecl_then [‘2 ** (fromBL dVal + 1)’, ‘bleval x’, ‘bleval y’] mp_tac karatsuba_num
  >> impl_tac
  >- (unabbrev_all_tac >> gs[fromBL_correct, divpow2_thm, add_thm])
  >> disch_then $ rewrite_tac o single
  >> unabbrev_all_tac
  >> gs[divpow2_thm, modpow2_thm, add_thm, mul_thm, mulpow2_thm, sub_thm, fromBL_correct]
QED

val _ = export_theory();

(** Legacy stuff, karatsuba conversion defined in bitArithLib.sml

val karatsuba_lim = ref $ Arbnum.fromInt (200) (* Arbnum.fromInt(50000) *)

fun timed s f x =
  let
    val hol_mode_time0 = #usr (Timer.checkCPUTimer Globals.hol_clock);
    val res = f x
    val _ = let val t = #usr (Timer.checkCPUTimer Globals.hol_clock)
                val elapsed = Time.-(t, hol_mode_time0)
            in
              print ("\n*** Time taken for "^ s^ " : " ^Time.toString elapsed^"s\n")
            end
  in
    res
  end

local
  val subst_let_conv = (REWR_CONV LET_THM THENC BETA_CONV)
  fun eval_let_conv c = RAND_CONV c THENC subst_let_conv
  fun karatsuba_rec_conv (* nRec *) tm = let
    val bs1 = rand $ rator $ rand tm
    val bs2 = rand $ rand tm
    val len_bs1 = numSyntax.dest_numeral $ rhs o concl $ EVAL “LENGTH ^bs1”
    val len_bs2 = numSyntax.dest_numeral $ rhs o concl $ EVAL “LENGTH ^bs2”
    in
      if Arbnum.<(len_bs1,!karatsuba_lim) then (print "Bottom-out at m1\n"; (RAND_CONV EVAL) tm)
      else if Arbnum.<(len_bs2,!karatsuba_lim) then (print "Bottom-out at n1\n"; (RAND_CONV EVAL) tm)
      (* else if Arbnum.compare (nRec, Arbnum.zero) = EQUAL then (print "Bottom-out at iteration count\n"; (RAND_CONV EVAL) tm) *)
      else let
    val _ = print "."
    val th = SPECL [bs1, bs2] karatsuba_bit
    val th = th |> timed "d" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    val th = th |> timed "x1" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    val th = th |> timed "x0" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    val th = th |> timed "y1" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    val th = th |> timed "y0" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    (** Ugly: Get rid of lets for mults **)
    val z0 = th |> rhs o concl |> rand |> rand
    val th = th |> timed "inline_z0" $ RIGHT_CONV_RULE $ RAND_CONV subst_let_conv
    val z2 = th |> rhs o concl |> rand |> rand
    val th = th |> timed "inline_z2" $ RIGHT_CONV_RULE $ RAND_CONV subst_let_conv
    (** Continue eval **)
    val th = th |> timed "z1a" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    val th = th |> timed "z1b" $ RIGHT_CONV_RULE $ RAND_CONV (eval_let_conv EVAL)
    (** Ugly: More inlining **)
    val z1Mul = th |> rhs o concl |> rand |> rand
    val th = th |> timed "inline_z1Mul" $ RIGHT_CONV_RULE $ RAND_CONV subst_let_conv
    val th = th |> timed "inline_z1Sub" $ RIGHT_CONV_RULE $ RAND_CONV subst_let_conv
    (** Now evaluate the terms we inlined **)
    val z0Eval = karatsuba_rec_conv (* (Arbnum.- (nRec, Arbnum.one)) *) “bleval ^z0” (** TODO: Make this a recursive call **)
    val z2Eval = karatsuba_rec_conv (* (Arbnum.- (nRec, Arbnum.one)) *) “bleval ^z2” (** TODO: Make this a recursive call **)
    val z1MulEval = karatsuba_rec_conv (* (Arbnum.- (nRec, Arbnum.one)) *) “bleval ^z1Mul” (** TODO: Make this a recursive call **)
    (** Now first get down to ‘bleval (mul _ _)’ terms **)
    val th2 = th |> timed "rewriting" $ REWRITE_RULE [add_thm, mulpow2_thm, sub_thm]
    val th3 = th2 |> timed "mul_rewriting" $ REWRITE_RULE [z0Eval, z2Eval, z1MulEval]
    val th4 = th3 |> timed "undo_rewriting" $ REWRITE_RULE [GSYM add_thm, GSYM mulpow2_thm, GSYM sub_thm]
    in
      th4 |> timed "eval residual" $ RIGHT_CONV_RULE $ RAND_CONV EVAL
    end end;
in
  fun karatsuba_conv tm =
    karatsuba_rec_conv (* (Arbnum.fromInt 5) *) tm
end;


val n1 = EVAL “tobl (20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:num) T” |> rhs o concl
val n2 = EVAL “tobl (30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:num) T” |> rhs o concl
val test = timed "karatsuba" karatsuba_conv “bleval (mul ^n1 ^n2)” |> rhs o concl |> EVAL

val test2 = timed "nokaratsuba" EVAL “(20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:num) * (30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:num)”

val test1= “num”

val test2 = “num”

val fullex = timed "karatsuba" karatsuba_conv “^test1 * ^test2”
 “bleval (mul ^(test1 |>rhs o concl) ^(test2 |> rhs o concl))”

Definition add_aux_def:
  add_aux ZERO n F = n /\
  add_aux ZERO ZERO T = BIT1 ZERO /\
  add_aux ZERO (BIT0 n) T = BIT1 n /\
  add_aux ZERO (BIT1 n) T = BIT0 (add_aux ZERO n T) /\
  add_aux n ZERO F = n /\
  add_aux (BIT0 n) ZERO T = BIT1 n /\
  add_aux (BIT1 n) ZERO T = BIT0 (add_aux ZERO n T) /\
  add_aux (BIT0 n) (BIT0 m) T = BIT1 (add_aux n m F) /\
  add_aux (BIT0 n) (BIT0 m) F = BIT0 (add_aux n m F) /\
  add_aux (BIT1 n) (BIT0 m) F = BIT1 (add_aux n m F) /\
  add_aux (BIT1 n) (BIT0 m) T = BIT0 (add_aux n m T) /\
  add_aux (BIT0 n) (BIT1 m) T = BIT0 (add_aux n m T) /\
  add_aux (BIT0 n) (BIT1 m) F = BIT1 (add_aux n m F) /\
  add_aux (BIT1 n) (BIT1 m) T = BIT1 (add_aux n m T) /\
  add_aux (BIT1 n) (BIT1 m) F = BIT0 (add_aux n m T)
End

Definition add_def:
  add m n = add_aux m n F
End

Theorem add_aux_thm:
  ∀m n b.
    val_of (add_aux m n b) = val_of m + val_of n + if b then 1 else 0
Proof
  ho_match_mp_tac add_aux_ind \\ fs [add_aux_def,val_of_def]
QED

Theorem add_thm:
  val_of (add m n) = val_of m + val_of n
Proof
  fs [add_def,add_aux_thm]
QED

Definition of_val_def:
  of_val (0:num) = ZERO ∧
  of_val (SUC n) = add (BIT1 ZERO) (of_val n)
End

Theorem val_of_of_val:
  val_of (of_val n) = n
Proof
  Induct_on ‘n’ >> gs[val_of_def, of_val_def, add_thm]
QED

Definition add1_def:
  add1 (ZERO) = BIT1 ZERO ∧
  add1 (BIT0 n) = BIT1 n ∧
  add1 (BIT1 n) = (BIT0 (add1 n))
End

Definition delete_last_def:
  delete_last (ZERO) = ZERO ∧
  delete_last (BIT1 ZERO) = ZERO ∧
  delete_last (BIT0 ZERO) = ZERO ∧
  delete_last (BIT1 n) = BIT1 (delete_last n) ∧
  delete_last (BIT0 n) = BIT0 (delete_last n)
End

Definition toNumeral_def:
  toNumeral ZERO = ZERO ∧
  toNumeral (BIT1 n) = BIT2 (toNumeral n) ∧
  toNumeral (BIT0 n) = BIT1 (toNumeral n)
End

(** EVAL “NUMERAL (toNumeral (delete_last (add1 (of_val 6))))” |> rhs o concl |> numLib.num_CONV **)

(** TODO **)
Theorem NUMERAL_of_val:
  of_val (NUMERAL ZERO) = ZERO ∧
  (** BIT1 n = 2 * n + 1 **)
  of_val (NUMERAL (BIT1 n)) = BIT1 (of_val (NUMERAL n)) ∧
  (** BIT2 n = 2 * n + 2 = 2 * (n + 1) **)
  of_val (NUMERAL (BIT2 n)) = BIT0 (BIT1 (of_val (NUMERAL n)))
Proof
  rpt conj_tac
  >- gs[NUMERAL_DEF, ALT_ZERO, of_val_def]
  >-(
    rewrite_tac[NUMERAL_DEF, BIT1]
    >> ‘n + (n + SUC 0) = SUC (n + n)’  by gs[]
    >> pop_assum $ once_rewrite_tac o single
    >> gs[of_val_def]
    >> cheat (* FIXME: Wrong definition *))
  >> rewrite_tac [NUMERAL_DEF, BIT1, BIT2, ALT_ZERO]
  >> ‘n + (n + SUC (SUC 0)) = SUC (SUC (n + n))’ by gs[]
  >> pop_assum $ once_rewrite_tac o single
  >> gs[of_val_def, add_def, add_aux_def]
  >> cheat
QED

(*  Broken
Theorem val_of_NUMERAL:
  val_of ZERO = NUMERAL ZERO ∧
  val_of (BIT1 n) = NUMERAL (BIT1 (val_of n)) ∧
  val_of (BIT0 n) = (case n of |ZERO => 0
                            |BIT1 n' => NUMERAL (BIT2 (val_of n'))
                            | BIT0 n' => 2 * (val_of (BIT1 n')))
Proof
  cheat
QED

(* TODO *)
fun val_to_NUMERAL_conv tm =
  SIMP_CONV bool_ss [val_of_NUMERAL] “val_of ^tm”

 *)

fun val_from_NUMERAL_conv tm =
  REWRITE_CONV [NUMERAL_of_val] “of_val ^tm”

Definition divpow2_def:
  divpow2 ZERO k = ZERO ∧
  divpow2 (BIT0 n) 0 = BIT0 n ∧
  divpow2 (BIT1 n) 0 = BIT1 n ∧
  divpow2 (BIT0 n) (SUC k) = divpow2 n k ∧
  divpow2 (BIT1 n) (SUC k) = divpow2 n k
End

Theorem DIV_POW2:
  ∀ x y. 0 < y ⇒ 2 * x DIV (2 * y) = x DIV y
Proof
  rpt strip_tac >> gs[GSYM DIV_DIV_DIV_MULT]
  >> ‘2 * x = x * 2’ by gs[]
  >> pop_assum $ rewrite_tac o single
  >> gs[MULT_DIV]
QED

Theorem divpow2_thm:
  ∀ x k. val_of (divpow2 x k) = val_of x DIV (2 ** k)
Proof
  ho_match_mp_tac divpow2_ind >> gs[divpow2_def, val_of_def, ZERO_DIV]
  >> rpt strip_tac
  >- (
    ‘2 ** SUC k = 2 * 2 ** k’ by gs[EXP]
    >> ‘2 * val_of x = val_of x * 2’ by gs[]
    >> pop_assum $ rewrite_tac o single
    >> gs[MULT_DIV, DIV_POW2])
  >> ‘2 ** SUC k = 2 * 2 ** k’ by gs[EXP]
  >> ‘2 * val_of x = val_of x * 2’ by gs[]
  >> gs[GSYM DIV_DIV_DIV_MULT]
  >> ‘2 * val_of x = val_of x * 2’ by gs[]
  >> pop_assum $ rewrite_tac o single
  >> gs[DIV_MULT]
QED

Definition modpow2_def:
  modpow2 ZERO k = ZERO ∧
  modpow2 (BIT0 n) 0 = ZERO ∧
  modpow2 (BIT1 n) 0 = ZERO ∧
  modpow2 (BIT0 n) (SUC k) = BIT0 (modpow2 n k) ∧
  modpow2 (BIT1 n) (SUC k) = BIT1 (modpow2 n k)
End

Theorem modpow2_thm:
  ∀ x k. val_of (modpow2 x k) = val_of x MOD (2 ** k)
Proof
  ho_match_mp_tac modpow2_ind >> TRY (gs[modpow2_def, val_of_def, ZERO_MOD] \\ ALL_TAC)
  >> rpt strip_tac
  >- (
    qspecl_then [‘2’, ‘val_of x’, ‘2 ** k’] mp_tac MOD_COMMON_FACTOR
    >> ‘2 ** SUC k = 2 * 2 ** k’ by gs[EXP]
    >> gs[])
  >> ‘2 ** SUC k = 2 * 2 ** k’ by gs[EXP]
  >> gs[]
       MOD_MULT


  >> ‘2 * val_of x = val_of x * 2’ by gs[]
  >> gs[GSYM DIV_DIV_DIV_MULT]
  >> ‘2 * val_of x = val_of x * 2’ by gs[]
  >> pop_assum $ rewrite_tac o single
  >> gs[DIV_MULT]

  >- cheat
  >> cheat
QED

Definition sub_aux_def:
  sub_aux ZERO _ _ = ZERO ∧
  sub_aux (BIT0 n) ZERO T = BIT1 (sub_aux n ZERO T) ∧
  sub_aux (BIT1 n) ZERO T = BIT0 n ∧
  sub_aux (BIT0 n) ZERO F = BIT0 n ∧
  sub_aux (BIT1 n) ZERO F = BIT1 n ∧
  sub_aux (BIT0 n) (BIT0 m) T = BIT1 (sub_aux n m T) ∧
  sub_aux (BIT0 n) (BIT0 m) F = BIT0 (sub_aux n m F) ∧
  sub_aux (BIT0 n) (BIT1 m) T = BIT0 (sub_aux n m T) ∧
  sub_aux (BIT0 n) (BIT1 m) F = BIT1 (sub_aux n m T) ∧
  sub_aux (BIT1 n) (BIT0 m) T = BIT0 (sub_aux n m F) ∧
  sub_aux (BIT1 n) (BIT0 m) F = BIT1 (sub_aux n m F) ∧
  sub_aux (BIT1 n) (BIT1 m) T = BIT1 (sub_aux n m T) ∧
  sub_aux (BIT1 n) (BIT1 m) F = BIT0 (sub_aux n m F)
End

Definition sub_def:
  sub m n = sub_aux m n F
End

Theorem sub_aux_thm:
  ∀m n b.
    val_of (sub_aux m n b) = val_of m - (val_of n + if b then 1 else 0)
Proof
  ho_match_mp_tac sub_aux_ind >> rpt conj_tac >> rpt strip_tac
  >> fs[sub_aux_def, val_of_def, arithmeticTheory.LEFT_SUB_DISTRIB, arithmeticTheory.LEFT_ADD_DISTRIB]
  >- cheat (* arithmetic *)
  >- cheat (* arithmetic *)
  >- cheat (* arithmetic *)
  >- cheat (* arithmetic *)
  >- cheat (* arithmetic *)
QED

Theorem sub_thm:
  ∀ m n. val_of (sub m n) = val_of m - val_of n
Proof
  gs[sub_def, sub_aux_thm]
QED

Definition mul_def:
  mul ZERO _ = ZERO ∧
  mul (BIT1 n) m = add m (mul n (BIT0 m)) ∧
  mul (BIT0 n) m = mul n (BIT0 m)
End

Theorem mul_thm:
  ∀ x y. val_of (mul x y) = val_of x * val_of y
Proof
  Induct_on ‘x’ >> gs[mul_def, val_of_def, add_thm]
QED

Definition mulpow2_def[nocompute]:
  mulpow2 ZERO _ = ZERO ∧
  mulpow2 n 0 = n ∧
  mulpow2 n (SUC k) = BIT0 (mulpow2 n k)
End

Theorem mulpow2_NUMERAL:
  mulpow2 ZERO x = ZERO ∧
  mulpow2 n (NUMERAL ZERO) = n ∧
  mulpow2 n (NUMERAL (BIT1 k)) = mulpow2 (BIT0 n) (NUMERAL k) ∧
  mulpow2 n (NUMERAL (BIT2 k)) = mulpow2 (BIT0 (BIT0 n)) (NUMERAL k)
Proof
  cheat
QED

val _ = computeLib.add_thms [mulpow2_NUMERAL]

Theorem karatsuba:
  ∀ x y.
  mul x y =
      let d = val_of (divpow2 (add (divpow2 (naiveLength x) 1) (divpow2 (naiveLength y) 1)) 1) in
      let x1 = divpow2 x d in
      let x0 = modpow2 x d in
      let y1 = divpow2 y d in
      let y0 = modpow2 y d in
      let z0 = mul x0 y0 in
      let z2 = mul x1 y1 in
      let z1a = add x1 x0 in
      let z1b = add y1 y0 in
      let z1 = mul z1a z1b in
      let z1 = sub (sub z1 z2) z0 in
        add (mulpow2 (add (mulpow2 z2 d) z1) d) z0
Proof
  cheat
QED

val karatsuba_lim = ref $ Arbnum.fromInt (200) (* Arbnum.fromInt(50000) *)

fun timed s f x =
  let
    val hol_mode_time0 = #usr (Timer.checkCPUTimer Globals.hol_clock);
    val res = f x
    val _ = let val t = #usr (Timer.checkCPUTimer Globals.hol_clock)
                val elapsed = Time.-(t, hol_mode_time0)
            in
              print ("\n*** Time taken for "^ s^ " : " ^Time.toString elapsed^"s\n")
            end
  in
    res
    end

Definition naiveLength_def:
  naiveLength ZERO = ZERO ∧
  naiveLength (BIT1 n) = add (BIT1 ZERO) (naiveLength n) ∧
  naiveLength (BIT0 n) = add (BIT1 ZERO) (naiveLength n)
End

local
  val subst_let_conv = (REWR_CONV LET_THM THENC BETA_CONV)
  fun eval_let_conv c = RAND_CONV c THENC subst_let_conv
  fun karatsuba_rec_conv nRec tm = let
    val m1 = rand $ rator tm (* Now as bit representation *)
    val n1 = rand tm (* Now as bit representation *)
    val len_m1 = numSyntax.dest_numeral $ rhs $ concl $ EVAL “val_of (naiveLength ^m1)”
    val len_n1 = numSyntax.dest_numeral $ rhs $ concl $ EVAL “val_of (naiveLength ^n1)”
    in
    if Arbnum.<(len_m1,!karatsuba_lim) then (print "Bottom-out at m1\n"; EVAL tm)
    else if Arbnum.<(len_n1,!karatsuba_lim) then (print "Bottom-out at n1\n"; EVAL tm)
    else if Arbnum.compare (nRec, Arbnum.zero) = EQUAL then (print "Bottom-out at iteration count\n"; EVAL tm)
    else let
    val _ = print "."
    (* Log2 not needed anymore
       val log_of_m = Arbnum.log2 m1 |> Arbnum.toInt
       val log_of_n = Arbnum.log2 n1 |> Arbnum.toInt **)
    (* val k = ((Arbnum.toInt len_m1 div 2) + (Arbnum.toInt len_n1 div 2 )) div 2
    val d = numSyntax.mk_numeral $ Arbnum.fromInt k *)
    val th = SPECL [m1, n1 (*, d *)] karatsuba
                (* |> CONV_RULE ((RATOR_CONV o RAND_CONV) EVAL)
                |> C MP TRUTH *)
    val th = th |> timed "d" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "x1" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "x0" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "y1" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "y0" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "z0" $ RIGHT_CONV_RULE $ eval_let_conv (karatsuba_rec_conv (Arbnum.- (nRec, Arbnum.one)))
    val th = th |> timed "z2" $ RIGHT_CONV_RULE $ eval_let_conv (karatsuba_rec_conv (Arbnum.- (nRec, Arbnum.one)))
    val th = th |> timed "z1a" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "z1b" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    val th = th |> timed "z1" $ RIGHT_CONV_RULE $ eval_let_conv (karatsuba_rec_conv (Arbnum.- (nRec, Arbnum.one)))
    val th = th |> timed "z1" $ RIGHT_CONV_RULE $ eval_let_conv EVAL
    in th |> timed "res" $ RIGHT_CONV_RULE EVAL end end
  in
    fun karatsuba_conv tm =
      karatsuba_rec_conv (Arbnum.fromInt 5) tm
  end;

val test = val_from_NUMERAL_conv “^(numSyntax.mk_numeral m1)” |> rhs o concl
EVAL “naiveLength ^test” |> rhs o concl
EVAL “naiveLength ^(nBit |> rhs o concl)” |> rhs o concl

val t1 = val_from_NUMERAL_conv “1000:num” |> rhs o concl
val t2 = val_from_NUMERAL_conv “1001:num” |> rhs o concl
val tm = “mul ^t1 ^t2”

val n1 = “20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:num”
val n2 = “30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000:num”

val t1 = val_from_NUMERAL_conv n1 |> rhs o concl
val t2 = val_from_NUMERAL_conv n2 |> rhs o concl
val tm = “mul ^t1 ^t2”

val _ = Count.apply EVAL “^n1 * ^n2”
val _ = Count.apply EVAL “mul ^t1 ^t2”
val res = Count.apply karatsuba_conv “mul ^t1 ^t2” |> rhs o concl
val result = EVAL “val_of ^res”  |> rhs o concl |> numSyntax.dest_numeral
val unverifResult = Arbnum.* (numSyntax.dest_numeral n1, numSyntax.dest_numeral n2)


val test1= val_from_NUMERAL_conv “^(numSyntax.mk_numeral (Arbnum.fromString "34103284421020413764437176953548006627235503498313600107254578487826175756030936079260415385081879678037508292943905492077152419610674442685299481878149884726893048624488983835173354045015264010933470092863699383724488220795672304910630026121313248193220693082201782314146625728769273769132369801537562377682895487901585545017955048462703755880054275782736044056966477562883201859384365873371183564986815668741484157750077163618142693406059898831792453053728204745288087516432507392736476003724309971207264566263557538786763876973868347365412928782809209335074279632916709968229254474636969001560720160129411062902143761649716761734822967109733274414712220142465598973924413708480742022293594046208249496896277683348773952543819500725041305612719010017098911874490613912068564166965037912863778443993906839145771778752381241334505496876638595035051403474890272973572198056183260841343699269349088434595824145228671623487867846294299991126296166206122153336730380848519831671524008745621672017253085966560231648192797591057055077020727484881205199006382558112339240555273861900284613780338871826265505708991992097995007764345591841211340313198595831696738509248558705309852695173967326467069669258648681289750814929130904623134265701211453124817386766589366265992300163448283501673222536223311971080418138656048035225403974664619813120524317014293973996125785114035885678801467348857917094068373733283138015429688823523227551282518130916087317623517618954447023334684166723300113158685256712068147265369616034636645365580126046842729531686599666829407366059324292148906278667863636290444533684699708924986104932714163163576840144317331142614647362703120858413728161870869875611967259852667264602945901113730231591925110530545502105036834047336485974642030900490229113917979450858506771362709140729073223850787911515691960484256867552269472872702793279315019457793784181863157370436033332450360177138903082551771475440361713006752063955585388799163583023988861996147415345328229439583092009289402801509244059229532222089176878768653633280611561929679202238254006123042081454331621044624235135673969168846581110761182904442046486361226489114032032577545408665130426740146401046727825205295212635129985133996766860357362836565347144846902559004495269488001316294819673608310366400196629167470104445394742928369140929909020287901116211282294107519012251053833975250951838099982236610592867573432059946209566347961467807076425918799999216591989549530324265830016122681559854670981076832327581957698671548765033457610229317622812357217327860047768345310692752804945531205492600574698853805864783862863417045855202322416317623859305934793969924897462021497544440976586501338206282730442231065255870320239003052201198856542845368190271758197391675747346080180468116746647082505539689460740523341807115095624085317926675151230622061054527927020630126597305361109695903572905969257302184877507808198696846089782464737055731840112506940813244650423564181855955263049847401989137900006947274789308504676028061149746773240598039464281385219860892633697646491207602893885173886723648685439190122460940470368414040220037196395805926324423139054356389617833161524372495670839448347337459245625865554996920218665439653575434772389637284046531749070949499711717254759271133654547445644553123973586799132357319326860648127286395504799072867294615580893554304711496873632285305028275600110687933621897340758175215192241611439825352624098220744606529406867417666086460919328158532770033970281939305030580045374994882271357712774322287759917610608231824014503810422624517227461436657723521570988224483635914605640212676089129879884824092953972188490246908729250586954622829909892563233413087469871498655138852542648057470249884163484196767512748807763139237675912263950654982018557747249554700208773544017006288157748333649829211871079747061355849588714429197047683565632511459542839320253893146751413419680676119987182010954637995091691798904796097574843926011011225753951820200547240813316789246534677725406945140076183715741496004945087437902214190592703703462046025377214660824288548274029494730241883102491468031891549232861159868708974793196927999862471000630448624176427401795382009217123655295464169421937820681801006653073509946981600056995341832369588279072937940847296553693780176032767901339965833579699229100774105011531277671305441755902890399761403913882542441922411623566008680695507749161791181291198598050408480200525787702031390838542833718672005471791830911892017355969993161055139136590491691420004783904019968659570237706337917557759900254123046981065948581502424718321155230883034983531614241715461179296287130388380533907927219271413907473640720303376882556246192987101979165206267446749787268467385090372722274939333916997420315666570762986949735858364158760724254528134409175014827818850781417966587655081288879619257808098446432211350754138269325533089893266808373222433646218550676139260974749876186266943121434102047560065491775652536949902645407335194492026086909819045730427976958392581301716011381519978363361224462687697103064968723585906017938251775719934346246448352361642109802451127465215974470982677962630541778954519472244852643076870169804216202980768707601259055374307153818333005021025459217137292786084846029465285416405175886420597190485047120220479142234052232552473091332890021176217474221891927518160249153948409904335879264883699419645541788907391316209603739968968289291510999744552262629206185255107830722122016148198269504390749692204119863851539858791330745750771918674183719925805776632030133824375879357635281996083953304426408572533264036435759512040179001402752438991350544370418004286199929049034695028098300148205581750649240801905483954069004972428916258206419226327916978787212186929844512709787787177766544422893283094462079705557683121637513850945969360277836537896820800747479421436499709435449944977947"))”

val test2 = val_from_NUMERAL_conv “^(numSyntax.mk_numeral (Arbnum.fromString ""))”

val _ = Count.apply karatsuba_conv “mul ^(test1 |> concl |> rhs) ^(test2 |> concl |> rhs)”

EVAL “naiveLength ^(test1 |> rhs o concl)” |> rhs o concl

                                    val _ = Count.apply karatsuba_conv “^test1 * ^test2”

val testVal = EVAL “mul ^(test1 |> rhs o concl)  ^(test2 |> rhs o concl)”

val bs =
  rhs (concl (EVAL “tobl 9825982750293819375983590815029384572093845720349 F”))
val t1 = time EVAL “fromBL ^bs” (* ~5 times faster *)
val t2 = time EVAL “bleval ^bs”

val _ = Globals.max_print_depth := 20;
val t3 = time EVAL “tobl”

val t4 = let val bs1 = rhs (concl t3) in time EVAL “fromBL ^bs1” end

Datatype:
  nat = ZERO | BIT0 nat | BIT1 nat
End

Definition val_of_def:
  val_of ZERO = 0:num /\
  val_of (BIT0 n) = 2 * val_of n /\
  val_of (BIT1 n) = 2 * val_of n + 1
End

Definition toNat_def:
  toNat ([]:bool list) :nat = ZERO ∧
  toNat (F::bs) = BIT0 (toNat bs) ∧
  toNat (T::bs) = BIT1 (toNat bs)
End

Definition fromNat_def:
  fromNat (ZERO) = [] ∧
  fromNat (BIT0 n) = F :: fromNat n ∧
  fromNat (BIT1 n) = T :: fromNat n
End

**)
