oldDisplay=display;
display = powers!;  //putting ! after a command supresses its output

p1 = 2114641 / 63078400 +
(x * (-4302101 / 8388608) +
 (x^2 * (218995919 / 91750400) +
  (x^3 * (-297761 / 65536) +
   (x^4 * (513727 / 153600) +
    (x^6 * (-27828319 / 32256000) +
     (x^8 * (339130189 / 1806336000) +
      (x^10 * (-832751917 / 23224320000) +
       (x^12 * (100119191 / 16257024000) +
	(x^14 * (-376705291 / 390168576000) +
	 (x^16 * (45708134737 / 327741603840000) +
	  (x^18 * (-73421871629 / 3932899246080000) +
	   (x^20 * (548323249043 / 235973954764800000) +
	    (x^22 * (-31083368887 / 115365044551680000) +
	     (x^24 * (769924617307 / 26429082933657600000) +
	      (x^26 * (-6989032781953 / 2378617464029184000000) +
	       (x^28 * (157848169739 / 570868191367004160000) +
		(x^30 * (-6237008492681 / 256890686115151872000000) +
		 (x^32 *
		  (14308566166987 / 7192939211224252416000000) +
		  (x^34 *
		   (-2625706911341 / 17263054106938205798400000) +
		   (x^36 *
		    (281070583919389 / 25894581160407308697600000000) +
		    (x^38 *
		     (-7489911012109 / 10357832464162923479040000000) +
		     (x^40 *
		      (838644092161681 /
		       18644098435493262262272000000000) +
		      (x^42 *
		       (-97450114718347 /
			37288196870986524524544000000000) +
		       (x^44 *
			(174560497768133 /
			 1230510496742555309309952000000000) +
			(x^46 *
			 (-48301760310089 /
			  6711875436777574414417920000000000) +
			 (x^48 *
			  (76966696911187 /
			   225519014675726500324442112000000000) +
			  (x^50 *
			   (-5119939855474543 /
			    338278522013589750486663168000000000000) +
			   (x^52 *
			    (283179345908593 /
			     451038029351453000648884224000000000000) +
			    (x^54 *
			     (-197824433247967 /
			      8118684528326154011679916032000000000000) +
			     (x^56 *
			      (42244416133883197 /
			       47737865026557785588677906268160000000000000) +
			      (x^58 *
			       (-8614868414031377 /
				286427190159346713532067437608960000000000000) +
			       (x^60 *
				(3523319254947641 /
				 3682635302048743459698009912115200000000000000) +
				(x^62 *
				 (-293678696819251 /
				  10311378845736481687154427753922560000000000000) +
				 (x^64 *
				  (2748533000559859 /
				   3464623292167457846883887725317980160000000000000) +
				  (x^66 *
				   (-6751941748690681 /
				    326664481832931739849052271244266700800000000000000) +
				   (x^68 *
				    (139555413103381 /
				     277169863373396627750711018025438412800000000000000) +
				    (x^70 *
				     (-857629583225539 /
				      74835863110817089492691974866868371456000000000000000) +
				     (x^72 *
				      (204107254654469 /
				       838161666841151402318150118508925760307200000000000000) +
				      (x^74 *
				       (-121340929712273 /
					25144850005234542069544503555267772809216000000000000000) +
				       (x^76 *
					(8397943199293 /
					 94293187519629532760791888332254148034560000000000000000) +
					(x^78 *
					 (-1383472351087 /
					  905214600188443514503602127989639821131776000000000000000) +
					 (x^80 *
					  (18505283137133 /
					   760380264158292552183025787511297449750691840000000000000000) +
					  (x^82 *
					   (-363698278633 /
					    1013840352211056736244034383348396599667589120000000000000000) +
					   (x^84 *
					    (59375562643 /
					     12166084226532680834928412600180759196011069440000000000000000) +
					    (x^86 *
					     (-334295055113 /
					      5474737901939706375717785670081341638204981248000000000000000000) +
					     (x^88 *
					      (1415488601719 /
					       2023463128556915476465293583662063869480561069260800000000000000000) +
					      (x^90 *
					       (-1812651895841 /
						248334111231985081202558757994889656708977949409280000000000000000000) +
					       (x^92 *
						(34227722597 /
						 496668222463970162405117515989779313417955898818560000000000000000000) +
						(x^94 *
						 (-1740029761 /
						  2980009334783820974430705095938675880507735392911360000000000000000000) +
						 (x^96 *
						  (196391207 /
						   44700140021757314616460576439080138207616030893670400000000000000000000) +
						  (x^98 *
						   (-2959 /
						    102171748621159576266195603289326030188836642042675200000000000000000) +
						   (x^100 *
						    (943741 /
						     5747160859940226164973502685024589198122061114900480000000000000000000000) +
						    (x^102 *
						     (-62813 /
						      80460252039163166309629037590344248773708855608606720000000000000000000000) +
						     (x^104 *
						      (2893 /
						       965523024469957995715548451084130985284506267303280640000000000000000000000) +
						      (x^106 *
						       (-253 /
							28965690734098739871466453532523929558535188019098419200000000000000000000000) +
						       (x^108 *
							(1 /
							 57931381468197479742932907065047859117070376038196838400000000000000000000000) +
							x^110 *
							(-1 /
							 57352067653515504945503577994397380525899672277814870016000000000000000000000000)))))))))))))))))))))))))))))))))))))))))))))))))))))))));

p2 = 2114641 / 63078400 +
(x * (-4302101 / 8388608) +
 (x^2 * (218995919 / 91750400) +
  (x^3 * (-297761 / 65536) +
   (x^4 * (513727 / 153600) +
    (x^6 * (-27828319 / 32256000) +
     (x^8 * (339130189 / 1806336000) +
      (x^10 * (-832751917 / 23224320000) +
       (x^12 * (100119191 / 16257024000) +
	(x^14 * (-376705291 / 390168576000) +
	 (x^16 * (45708134737 / 327741603840000) +
	  (x^18 * (-73421871629 / 3932899246080000) +
	   (x^20 * (548323249043 / 235973954764800000) +
	    (x^22 * (-31083368887 / 115365044551680000) +
	     (x^24 * (769924617307 / 26429082933657600000) +
	      (x^26 * (-6989032781953 / 2378617464029184000000) +
	       (x^28 * (157848169739 / 570868191367004160000) +
		(x^30 * (-6237008492681 / 256890686115151872000000) +
		 (x^32 *
		  (14308566166987 / 7192939211224252416000000)))))))))))))))))));

dom = [0.1; 1];
derivativeZeros = findzeros(diff(p1-p2),dom); // here the derivativeZeros is a list of intervals that guarantee to contain the exact zeros
//derivativeZeros = inf(dom).:derivativeZeros:.sup(dom);
maximum=0;
for t in derivativeZeros do {
  r = evaluate(abs(p1-p2), t); // r is an interval, we should take its upper bound
  if sup(r) > maximum then { maximum=sup(r); argmaximum=t; };
  if (evaluate(diff(p-f),inf(t)) * evaluate (diff(p-f),sup(t)) <= 0 ) then {
  print ("Ok zero:");
    print ("    (", mantissa (inf(t)), " * inv (2 pow", -exponent(inf(t)), "),");
    print ("     ", mantissa (sup(t)), " * inv (2 pow", -exponent(sup(t)), "));");
  };
};
if (evaluate (abs(p1-p2),sup(dom))) > maximum then {maximum = evaluate (abs(p1-p2),sup(dom));};
if (evaluate (abs(p1-p2),inf(dom))) > maximum then {maximum = evaluate (abs(p1-p2),inf(dom));};

print("  eps := ", mantissa(maximum), " * inv (2 pow", -exponent(maximum), ");");

/* Some sanity checks to verify that our eps is not smaller than the reliable bounds obtained with dedicated methods */
display=oldDisplay!;
print("We got epsilon:", maximum);
print("Sanity check with infinity norm:", infnorm(p1-p2, dom, "proof.txt")); //here the last argument is rather for fun, it gives the proof of the bound, you can remove it.
