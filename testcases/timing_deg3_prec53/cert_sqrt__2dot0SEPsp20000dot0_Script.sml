
(** File: Daisy, function: carthesianToPolar_radius **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_sqrt__2dot0SEPsp20000dot0_";

val _ = realZeroLib.useBinary := true;

(* infnorm = (60351693138203063626996322428367203459814777189049)/(10000000000000000000000000000000000000000000000000) *)
Definition sqrt_example_def:
  sqrt_example =
  <|
    transc := Fun Sqrt (Var "_tmp");
    poly := [
    (2079329012430525)/(281474976710656);
    (98543155249322528232980289430997800081968307495117)/(5000000000000000000000000000000000000000000000000000);
    (-7037660519526045165076806944814968858281645225361)/(5000000000000000000000000000000000000000000000000000000);
    (9652711714750315525841521136572839952016966691417)/(250000000000000000000000000000000000000000000000000000000000)
    ];
  eps := (60351693138203063626996322428367203459814777189049)/(10000000000000000000000000000000000000000000000000) ;
  iv := [("_tmp",
    ((2)/(1),
    (20000)/(1)))];
  |>
End

Theorem checkerSucceeds = validateCert sqrt_example_def ``20:num``;

val _ = export_theory();
      