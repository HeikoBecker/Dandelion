
(** File: TransBenchsErrorBoundsSmall, function: forwardk2jX **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_cos__NEG3dot14SEPsp3dot14_";

val _ = realZeroLib.useBinary := true;

(* err = 3.0162574882177365688697150402797923014397056302963e-2 *)
(* infnorm = 2.90809766347635523276426912849374438386705761790214e-2 *)
Definition cos_example_def:
  cos_example =
  <|
    transc := Fun Cos (Var "theta1");
    poly := [
    (303412276239290353008204448315154877491295337677)/(312500000000000000000000000000000000000000000000);
    (17620560367629941112526819247432715090373456234829)/(100000000000000000000000000000000000000000000000000000000000);
    (-22172037857386509007717734220932470634579658508301)/(50000000000000000000000000000000000000000000000000);
    (-5917622757338443425822049475522890486962890310707)/(125000000000000000000000000000000000000000000000000000000000);
    (156251182034279796628783998357903328724205493927)/(6250000000000000000000000000000000000000000000000);
    (1868071864578333143529026552005058946757682508677)/(625000000000000000000000000000000000000000000000000000000000)
    ];
  eps := (30162574882177365688697150402797923014397056302963)/(1000000000000000000000000000000000000000000000000000) ;
  iv := [("theta1",
    ((-157)/(50),
    (157)/(50)))];
  |>
End

Theorem checkerSucceeds = validateCert cos_example_def ``32:num``;

val _ = export_theory();
      