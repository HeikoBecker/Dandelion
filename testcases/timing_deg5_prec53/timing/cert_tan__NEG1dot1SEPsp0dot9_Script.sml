
(** File: TransBenchsErrorBoundsSmall, function: ex2_11 **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_tan__NEG1dot1SEPsp0dot9_";

val _ = realZeroLib.useBinary := true;

(* err = 7.6734696236722002974550775780230862759171188413068e-3 *)
(* infnorm = 6.8110735284574004084310684671732590894523569658028e-3 *)
Definition tan_example_def:
  tan_example =
  <|
    transc := Fun Tan (Var "x");
    poly := [
    (47921244957217638046204077895140471810009330511093)/(100000000000000000000000000000000000000000000000000000);
    (10402796496814008531117679012822918593883514404297)/(10000000000000000000000000000000000000000000000000);
    (-39746996731025866292363879495042056078091263771057)/(5000000000000000000000000000000000000000000000000000);
    (20870103672827827745450690599682275205850601196289)/(200000000000000000000000000000000000000000000000000);
    (34707103901474322706077746403252604068256914615631)/(2500000000000000000000000000000000000000000000000000);
    (5323910062747257837534320401573495473712682723999)/(12500000000000000000000000000000000000000000000000)
    ];
  eps := (19183674059180500743637693945057715689792797103267)/(2500000000000000000000000000000000000000000000000000) ;
  iv := [("x",
    ((-11)/(10),
    (9)/(10)))];
  |>
End

Theorem checkerSucceeds = validateCert tan_example_def ``32:num``;

val _ = export_theory();
      