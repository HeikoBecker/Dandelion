
(** File: AllTrig, function: tangent **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_tan__NEG1dot57079632679SEPsp1dot57079632679_";

val _ = realZeroLib.useBinary := true;

(* err = 1.02932369485525385875522132393092551321586606083428e11 *)
(* infnorm = 1.042280117925106083612182651522675392057343773812e11 *)
Definition tan_example_def:
  tan_example =
  <|
    transc := Fun Tan (Var "x");
    poly := [
    (-29883137743315613121808382857125252485275268554687)/(100000000000000000000000000000000000000000000000000);
    (2662617322598943)/(8192);
    (1589980650183205)/(1125899906842624);
    (-2158240620850177)/(4096);
    (-26162611105635608099717615004919935017824172973633)/(50000000000000000000000000000000000000000000000000);
    (5598103836226007)/(32768)
    ];
  eps := (25733092371381346468880533098273137830396651520857)/(250000000000000000000000000000000000000) ;
  iv := [("x",
    ((-157079632679)/(100000000000),
    (157079632679)/(100000000000)))];
  |>
End

Theorem checkerSucceeds = validateCert tan_example_def ``32:num``;

val _ = export_theory();
      