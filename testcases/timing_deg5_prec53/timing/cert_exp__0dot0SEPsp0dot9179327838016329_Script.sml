
(** File: CompoundFunction, function: compundExp **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_exp__0dot0SEPsp0dot9179327838016329_";

val _ = realZeroLib.useBinary := true;

(* err = 6.623319822818026702422508664997889936455615143663e-7 *)
(* infnorm = 6.475341511827816481040818082491827476292938833569e-7 *)
Definition exp_example_def:
  exp_example =
  <|
    transc := Fun Exp (Var "_tmp");
    poly := [
    (1125899177786609)/(1125899906842624);
    (2500124285469478846444246755709173157811164855957)/(2500000000000000000000000000000000000000000000000);
    (12484566023307838711353667804360156878829002380371)/(25000000000000000000000000000000000000000000000000);
    (42363259886048748592557444681006018072366714477539)/(250000000000000000000000000000000000000000000000000);
    (9016414000854094945580641251581255346536636352539)/(250000000000000000000000000000000000000000000000000);
    (26639632572944330762831910419663472566753625869751)/(2000000000000000000000000000000000000000000000000000)
    ];
  eps := (6623319822818026702422508664997889936455615143663)/(10000000000000000000000000000000000000000000000000000000) ;
  iv := [("_tmp",
    ((0)/(1),
    (1033500435770049)/(1125899906842624)))];
  |>
End

Theorem checkerSucceeds = validateCert exp_example_def ``32:num``;

val _ = export_theory();
      