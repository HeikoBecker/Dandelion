
(** File: Herbie, function: complex_square_root **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_sqrt__2dot0ENEG6SEPsp200dot0_";

val _ = realZeroLib.useBinary := true;

(* err = 0.4181119477396544672757956382971927153955318804824 *)
(* infnorm = 0.39329664368928126356804256599318773883800239192033 *)
Definition sqrt_example_def:
  sqrt_example =
  <|
    transc := Fun Sqrt (Var "_tmp1");
    poly := [
    (616725234574090099004539666793789365328848361969)/(1562500000000000000000000000000000000000000000000);
    (6719425365066730160279462324979249387979507446289)/(20000000000000000000000000000000000000000000000000);
    (-18234019618601970610938245442866900702938437461853)/(2500000000000000000000000000000000000000000000000000);
    (16875181847069773539114778682090900474577210843563)/(200000000000000000000000000000000000000000000000000000);
    (-43789182967112683869204212833148304184760490898043)/(100000000000000000000000000000000000000000000000000000000);
    (41298505612513642848074834716665375972111107216733)/(50000000000000000000000000000000000000000000000000000000000)
    ];
  eps := (522639934674568084094744547871490894244414850603)/(1250000000000000000000000000000000000000000000000) ;
  iv := [("_tmp1",
    ((1)/(500000),
    (200)/(1)))];
  |>
End

Theorem checkerSucceeds = validateCert sqrt_example_def ``32:num``;

val _ = export_theory();
      