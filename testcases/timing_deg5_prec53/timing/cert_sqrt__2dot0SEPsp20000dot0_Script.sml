
(** File: Daisy, function: carthesianToPolar_radius **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_sqrt__2dot0SEPsp20000dot0_";

val _ = realZeroLib.useBinary := true;

(* err = 3.6978379381012385114571499366941108344366531159388 *)
(* infnorm = 3.47089843376598016898940268979570794368764025643755 *)
Definition sqrt_example_def:
  sqrt_example =
  <|
    transc := Fun Sqrt (Var "_tmp");
    poly := [
    (84810772177717)/(17592186044416);
    (32068507290034055368099785710001015104353427886963)/(1000000000000000000000000000000000000000000000000000);
    (-67374808087238566975591715080273758076145895756781)/(10000000000000000000000000000000000000000000000000000000);
    (9616530447543039923684356382277502867106377948403)/(12500000000000000000000000000000000000000000000000000000000);
    (-19823217573939004105201363982072026860261010697273)/(500000000000000000000000000000000000000000000000000000000000000);
    (14890897297922153339149685236588825580991291107409)/(20000000000000000000000000000000000000000000000000000000000000000000)
    ];
  eps := (9244594845253096278642874841735277086091632789847)/(2500000000000000000000000000000000000000000000000) ;
  iv := [("_tmp",
    ((2)/(1),
    (20000)/(1)))];
  |>
End

Theorem checkerSucceeds = validateCert sqrt_example_def ``32:num``;

val _ = export_theory();
      