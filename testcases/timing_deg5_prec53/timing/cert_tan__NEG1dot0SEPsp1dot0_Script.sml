
(** File: TransBenchsErrorBoundsSmall, function: ex2_6 **)
open realZeroLib preambleDandelion;

val _ = new_theory "cert_tan__NEG1dot0SEPsp1dot0_";

val _ = realZeroLib.useBinary := true;

(* err = 3.2567629377632084806739954345759604210793690795325e-3 *)
(* infnorm = 2.6028477360185877264781497558982549640236040315801e-3 *)
Definition tan_example_def:
  tan_example =
  <|
    transc := Fun Tan (Var "x");
    poly := [
    (28794375752767914740761055131040239279949233264233)/(200000000000000000000000000000000000000000000000000000000000);
    (50851433545620861043090599196148104965686798095703)/(50000000000000000000000000000000000000000000000000);
    (-5148846482115696700169848677361688488174351618909)/(1250000000000000000000000000000000000000000000000000000000);
    (215234735736637705638685247322428040206432342529297)/(1000000000000000000000000000000000000000000000000000);
    (20381975538516382034421757160624899540835031075403)/(2500000000000000000000000000000000000000000000000000000000);
    (32254149779987495438859923524432815611362457275391)/(100000000000000000000000000000000000000000000000000)
    ];
  eps := (1302705175105283392269598173830384168431747631813)/(400000000000000000000000000000000000000000000000000) ;
  iv := [("x",
    ((-1)/(1),
    (1)/(1)))];
  |>
End

Theorem checkerSucceeds = validateCert tan_example_def ``32:num``;

val _ = export_theory();
      